# EditorConfig (https://EditorConfig.org)
#
# top-most EditorConfig file
root = true

# All files
[*]
indent_style = space
spelling_exclusion_path = SpellingExclusions.dic
spelling_error_severity = warning 
spelling_checkable_types = strings,identifiers,comments 
tab_width = 4
indent_size = 4
end_of_line = crlf
trim_trailing_whitespace = true
max_line_length = 120
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning

# Xml files
[*.xml]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false

#### .NET Coding Conventions ####
[*.cs]

# Organize usings
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

# Expression-level preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

#### C# Coding Conventions ####
[*.cs]

# var preferences
csharp_style_var_elsewhere = false 
csharp_style_var_for_built_in_types = false 
csharp_style_var_when_type_is_apparent = true

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:silent
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:silent

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

# Code-block preferences
csharp_prefer_braces = when_multiline:warning
csharp_prefer_simple_using_statement = false:silent

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = false:silent
csharp_style_inlined_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false 
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = false:silent
csharp_style_prefer_top_level_statements = false:silent
csharp_style_prefer_primary_constructors = false:silent
csharp_style_prefer_null_check_over_type_check = true:warning
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:warning
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_prefer_readonly_struct = true:warning
csharp_style_prefer_readonly_struct_member = true:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:silent
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:silent
csharp_style_prefer_extended_property_pattern = true:warning


#### Naming styles ####
[*.cs]

# Naming rules
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = warning
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = warning
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = warning
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = warning
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = warning
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = warning
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = warning
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = warning
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = warning
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = warning
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = warning
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = warning
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = warning
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

# Symbol specifications
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers = 

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers = 

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers = 

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers = 

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers = 

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers = 

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers = 

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers = 

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers = 

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers = 

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers = 

# Naming styles
dotnet_naming_style.pascalcase.required_prefix = 
dotnet_naming_style.pascalcase.required_suffix = 
dotnet_naming_style.pascalcase.word_separator = 
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix = 
dotnet_naming_style.ipascalcase.word_separator = 
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix = 
dotnet_naming_style.tpascalcase.word_separator = 
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix = 
dotnet_naming_style._camelcase.word_separator = 
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix = 
dotnet_naming_style.s_camelcase.word_separator = 
dotnet_naming_style.s_camelcase.capitalization = camel_case
dotnet_style_prefer_collection_expression = true:warning 
# when_types_loosely_match .NET 9 and later.
# dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_namespace_match_folder = true:warning
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent

#
# Code-style analysis ("IDExxxx") rules 
# Language and unnecessary code rules.
#
# Simplify name. IDE Only. Not enforced on build.
dotnet_diagnostic.IDE0001.severity = warning 
# Simplify member access. IDE Only. Not enforced on build.
dotnet_diagnostic.IDE0002.severity = warning 
# Simplify member access. IDE Only. Not enforced on build.
dotnet_diagnostic.IDE0003.severity = warning 
# Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning
# Remove unnecessary using directives 
# To enable this rule on build, you need to enable 
# XML documentation comments for the project.
dotnet_diagnostic.IDE0005.severity = warning 
# Use var instead of explicit type. Turn off in favor of RCS1264. 
dotnet_diagnostic.IDE0007.severity = none 
# Use explicit type instead of var
dotnet_diagnostic.IDE0008.severity = none
# Add missing cases to switch statement 
dotnet_diagnostic.IDE0010.severity = error 
# Add braces
dotnet_diagnostic.IDE0011.severity = warning 
# Use throw expression 
dotnet_diagnostic.IDE0016.severity = warning 
# Object initialization can be simplified
dotnet_diagnostic.IDE0017.severity = warning 
# Inline variable declaration
dotnet_diagnostic.IDE0018.severity = warning 
# Use pattern matching to avoid 'as' followed by a 'null' check 
dotnet_diagnostic.IDE0019.severity = warning 
# Use pattern matching to avoid 'is' check followed by a cast
dotnet_diagnostic.IDE0020.severity = warning 
# Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = none
dotnet_diagnostic.IDE0021WithoutSuggestion.severity = none
# Use pattern matching to avoid 'as' followed by a 'null' check 
dotnet_diagnostic.IDE0022.severity = none
dotnet_diagnostic.IDE0022WithoutSuggestion.severity = none
# Use expression body for conversion operators
dotnet_diagnostic.IDE0023.severity = none
dotnet_diagnostic.IDE0023WithoutSuggestion.severity = none
# Use expression body for operators
dotnet_diagnostic.IDE0024.severity = none
dotnet_diagnostic.IDE0024WithoutSuggestion.severity = none
# Use expression body for properties
dotnet_diagnostic.IDE0025.severity = none
dotnet_diagnostic.IDE0025WithoutSuggestion.severity = none
# Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = none
dotnet_diagnostic.IDE0026WithoutSuggestion.severity = none
# Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = none
dotnet_diagnostic.IDE0027WithoutSuggestion.severity = none
# Use collection initializers or expressions 
dotnet_diagnostic.IDE0028.severity = warning 
# Null check can be simplified 
dotnet_diagnostic.IDE0029.severity = warning
# Null check can be simplified 
dotnet_diagnostic.IDE0030.severity = warning
# Use null propagation
dotnet_diagnostic.IDE0031.severity = warning 
# Use auto-implemented property 
dotnet_diagnostic.IDE0032.severity = warning 
# Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = warning 
# Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = warning 
# Remove unreachable code. IDE only. Not build. 
dotnet_diagnostic.IDE0035.severity = suggestion
# Order modifiers
dotnet_diagnostic.IDE0036.severity = error 
# Use inferred member names
dotnet_diagnostic.IDE0037.severity = warning 
# Use pattern matching to avoid is check followed by a cast (without variable) 
dotnet_diagnostic.IDE0038.severity = warning 
# Use local function instead of lambda 
dotnet_diagnostic.IDE0039.severity = warning 
# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = error 
# Add accessibility modifiers
dotnet_diagnostic.IDE0041.severity = warning 
# Deconstruct variable declaration 
dotnet_diagnostic.IDE0042.severity = none
# Add readonly modifier 
dotnet_diagnostic.IDE0044.severity = warning
# Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = warning
# Use conditional expression for return 
dotnet_diagnostic.IDE0046.severity = warning 
# Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = none
dotnet_diagnostic.IDE0047WithoutSuggestion.severity = none
# Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = warning 
# Use language keywords instead of framework type names for type references 
dotnet_diagnostic.IDE0049.severity = warning 
# Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning
# Remove unread private member 
dotnet_diagnostic.IDE0052.severity = warning
# Use expression body for lambda expression
dotnet_diagnostic.IDE0053.severity = warning
# Use compound assignment
dotnet_diagnostic.IDE0054.severity = warning
# Use index operator
dotnet_diagnostic.IDE0056.severity = warning 
# Use range operator
dotnet_diagnostic.IDE0057.severity = warning 
# Remove unnecessary expression value
dotnet_diagnostic.IDE0058.severity = warning 
# Remove unecessary value assignment
dotnet_diagnostic.IDE0059.severity = warning
# Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning
# Make local function static
dotnet_diagnostic.IDE0062.severity = warning
# Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = none
dotnet_diagnostic.IDE0063WithoutSuggestion.severity = none
# Make struct fields writable
dotnet_diagnostic.IDE0064.severity = warning
# 'using' directive placement
dotnet_diagnostic.IDE0065.severity = warning
# Use switch expression
dotnet_diagnostic.IDE0066.severity = silent
dotnet_diagnostic.IDE0066WithoutSuggestion.severity = none
# Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0070.severity = warning 
# Simplify interpolation
dotnet_diagnostic.IDE0071.severity = none
dotnet_diagnostic.IDE0071WithoutSuggestion.severity = none
# Add missing cases to switch expression 
dotnet_diagnostic.IDE0072.severity = warning 
# Use coalesce compound assignment 
dotnet_diagnostic.IDE0074.severity = none
dotnet_diagnostic.IDE0074WithoutSuggestion.severity = none
# Remove unnecessary suppression. 
dotnet_diagnostic.IDE0079.severity = none 
# Convert typeof to nameof
dotnet_diagnostic.IDE0082.severity = warning 
# Remove unnecessary equality operator 
dotnet_diagnostic.IDE0100.severity = warning 
# Simplify LINQ expression
dotnet_diagnostic.IDE0120.severity = warning 
# Namespace does not match folder structure 
dotnet_diagnostic.IDE0130.severity = warning 
# Prefer 'null' check over type check 
dotnet_diagnostic.IDE0150.severity = warning 
# Use file-scoped namespace 
dotnet_diagnostic.IDE0161.severity = warning 
# Simplify property pattern 
dotnet_diagnostic.IDE0170.severity = warning 
# Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = warning 
# Add explicit cast in foreach loop
dotnet_diagnostic.IDE0220.severity = none
# Struct can be made 'readonly'
dotnet_diagnostic.IDE0250.severity = warning 
# Member can be made 'readonly' 
dotnet_diagnostic.IDE0251.severity = warning 
# Null check can be simplified (if null check)
dotnet_diagnostic.IDE0270.severity = silent
# Use 'nameof'
dotnet_diagnostic.IDE0280.severity = warning
# Use primary constructor
dotnet_diagnostic.IDE0290.severity = none 
# Use collection expression for array
dotnet_diagnostic.IDE0300.severity = none 
# Use collection expression for empty (ImmutableArray<object>.Empty -> [])
dotnet_diagnostic.IDE0301.severity = none  
# Use collection expression for Create() (ImmutableArray.Create(x) -> [x])
dotnet_diagnostic.IDE0303.severity = none #
# Use collection expression for fluent (x.ToArray() -> [.. x])
dotnet_diagnostic.IDE0305.severity = none 
# Use conditional delegate call
dotnet_diagnostic.IDE1005.severity = warning

# Naming Rule Violation
dotnet_diagnostic.IDE1006.severity = error
# Formatting rule. Must be warning or error to trigger formatting rules during build.
# Turning off in favor of Roslynator formatter, otherwise conflicts can arise.
dotnet_diagnostic.IDE0055.severity = warning 

# Compare symbols correctly
dotnet_diagnostic.RS1023.severity = none 
# Configure generated code analysis ?
dotnet_diagnostic.RS1025.severity = none
# Enable concurrent execution ?
dotnet_diagnostic.RS1026.severity = none

# Sonar CSharp Rules
dotnet_diagnostic.S1694.severity = none
dotnet_diagnostic.S1135.severity = suggestion 
dotnet_diagnostic.S109.severity = error 


# Override Equals when implementing IEquatable 
dotnet_diagnostic.CA1067.severity = warning 
# Use nameof in place of string 
dotnet_diagnostic.CA1507.severity = warning 
# Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = none
# Do not ignore method results
dotnet_diagnostic.CA1806.severity = none
# Call GC.SuppressFinalize correctly 
dotnet_diagnostic.CA1816.severity = none
# Mark members as static 
dotnet_diagnostic.CA1822.severity = suggestion 
# Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = warning 
# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1826.severity = none
# Use property instead of Linq Enumerable method
dotnet_diagnostic.CA1829.severity = warning 
# Prefer IsEmpty over Count when available 
dotnet_diagnostic.CA1836.severity = warning 
# Prefer the IDictionary.TryGetValue(TKey, out TValue) method 
dotnet_diagnostic.CA1854.severity = warning 
# Avoid using 'Enumerable.Any()' extension method
dotnet_diagnostic.CA1860.severity = none
# Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = none
# Use the 'StringComparison' method overloads to perform case-insensitive string comparisons 
dotnet_diagnostic.CA1862.severity = warning
# Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2231.severity = none

# Use 'GeneratedRegexAttribute' to generate the regular expression implementation at compile-time.
dotnet_diagnostic.SYSLIB1045.severity = silent 
