@using ServerManagement.StateStore

@implements IDisposable

@inject OnlineServersStore OnlineServersStore

<div class="col">
    <div class="card @(City == SelectedCity? "border-primary":"")">
        <img src="@($"/images/{City}.png")" class="card-img-top" alt="@City">
        <div class="card-body">
            <button class="btn btn-primary" type="button" @onclick="@(() => {SelectCity(City);})">@City</button>
        </div>
        <div>
            <text>@NumberServersOnline</text>
        </div>
    </div>
</div>

@code {
    public int NumberServersOnline { get; private set; }

    [Parameter]
    public string SelectedCity { get; set; } = "Toronto";

    [Parameter]
    public string City { get; set; } = "";

    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            NumberServersOnline = OnlineServersStore.GetNumberServersOnline(City);
            OnlineServersStore.AddStateChangeListeners(OnServersStatusChange);

            StateHasChanged();
        }
    }

    private void SelectCity(string cityName)
    {
        SelectCityCallback.InvokeAsync(cityName);
    }

    private void OnServersStatusChange()
    {
        NumberServersOnline = OnlineServersStore.GetNumberServersOnline(City);
        StateHasChanged();
    }

    public void Dispose()
    {
        OnlineServersStore.RemoveStateChangeListeners(OnServersStatusChange);
    }
}
