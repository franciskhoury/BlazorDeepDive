@inject IServersEFCoreRepository ServersEFCoreRepository

@implements IDisposable

@if (servers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (this.servers.Count > 0)
    {
        <table class="table table-striped">
            <RepeaterComponent Items="this.servers">
                <Header>
                    <thead>
                        <tr>
                            <th>
                                Name
                            </th>
                            <th>
                                City
                            </th>
                            <th>
                                Status
                            </th>
                            <th>
                                Users Online
                            </th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                </Header>
                <Row Context="server">
                    <ServerComponent Server="server"></ServerComponent>
                </Row>
            </RepeaterComponent>
        </table>
    }
    else
    {
        <p><em>No Servers Found</em></p>
    }
}

@code {
    [Parameter]
    public string? CityName { get; set; }

    [Parameter]
    public string? SearchFilter { get; set; }

    private List<Server>? servers;

    private Timer? Timer;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        //var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(SetParametersAsync)} : {guid}");

        if (parameters.TryGetValue<string>("CityName", out var cityName))
        {
            if (cityName != CityName)
                base.SetParametersAsync(parameters);
        }

        if (parameters.TryGetValue<string>("SearchFilter", out var searchFilter))
        {
            if (searchFilter != SearchFilter)
                base.SetParametersAsync(parameters);
        }

        return Task.CompletedTask;
    }


    protected override void OnParametersSet()
    {
        //var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(OnParametersSet)} : {guid}");

        if (string.IsNullOrWhiteSpace(SearchFilter))
        {
            this.servers = ServersEFCoreRepository.GetServersByCity(CityName);
        }
        else
        {
            this.servers = ServersEFCoreRepository.SearchServers(SearchFilter);
        }

    }

    // With pre-rendering on (default) this event is first raised after the Signal-R channel is established,
    // so, there is may be some lag time from the user's perspective.
    
    protected override void OnAfterRender(bool firstRender)
    {
        var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRender)} : {guid}");

        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (string.IsNullOrWhiteSpace(this.SearchFilter))
            {
                this.servers = ServersEFCoreRepository.GetServersByCity(CityName);
            }
            else
            {
                this.servers = ServersEFCoreRepository.SearchServers(SearchFilter);
            }

            StateHasChanged();

            Timer = new Timer(_ =>
            {
                this.servers = ServersEFCoreRepository.GetServersByCity(CityName); // This "works" but may throw off the On/Off button functionality
                base.InvokeAsync(StateHasChanged);
            }, null, 5000, 5000);
        }
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     var guid = Guid.NewGuid();
    //     // Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRenderAsync)} : {guid}");

    //     base.OnAfterRender(firstRender);

    //     if (firstRender)
    //     {
    //         await Task.Delay(2000);

    //         if (string.IsNullOrWhiteSpace(this.SearchFilter))
    //         {
    //             this.servers = ServersEFCoreRepository.GetServersByCity(CityName);
    //         }
    //         else
    //         {
    //             this.servers = ServersEFCoreRepository.SearchServers(SearchFilter);
    //         }

    //         StateHasChanged();

    //         Timer = new Timer(_ =>
    //         {
    //             base.InvokeAsync(StateHasChanged);
    //         }, null, 2000, 2000);
    //     }
    // }

    protected override bool ShouldRender()
    {
        //var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(ShouldRender)} : {guid}");

        return base.ShouldRender();
    }

    protected override void OnInitialized()
    {
        //var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(OnInitialized)} : {guid}");
    }

    public void Dispose()
    {
        //var guid = Guid.NewGuid();
        //Console.WriteLine($"{this.GetType().Name}: {nameof(Dispose)} : {guid}");
    }

}

