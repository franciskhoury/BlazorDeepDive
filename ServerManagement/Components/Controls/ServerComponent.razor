@inject NavigationManager NavigationManager

@if (Server != null)
{

    <tr @key="Server.ServerId" style="background-color: @GetCityColor()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@(Server.IsOnline?"green":"red"); font-weight:600;">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 1000);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button" class="btn btn-outline-danger"
                        @onclick="(()=> {this.Server.IsOnline = false;})">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success"
                        @onclick="(()=> {this.Server.IsOnline = true;})">
                    Turn On
                </button>
            }
            &nbsp;
            <a href="/server/@Server.ServerId" class="btn btn-outline-primary">Edit</a>
        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-server-{Server.ServerId}")"
                      OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>

    </tr>
}

@code {
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        Server? server = ServersRepository.GetServerById(serverId);
        if (serverId > 0 && server != null)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo($"/servers/back_from/{server?.City}", true); // This does not work if global rendermode is set to InteractiveServer
        }
    }

    private string GetCityColor()
    {
        if (SelectedCity != null)
        {
            switch (SelectedCity)
            {
                case "Toronto": return "#77ee66";
                case "Ottawa": return "#55ccff";
                case "Halifax": return "#ffdd55";
                case "Montreal": return "#ffbb55";
                case "Calgary": return "#bbaaef";
                default: return "white";
            }
        }
        else
            return "white";
    }

}
