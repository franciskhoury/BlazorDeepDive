@using ServerManagement.StateStore
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore

@if (Server != null)
{

    <tr @key="Server.ServerId" style="background-color: @GetCityColor()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@(Server.IsOnline?"green":"red"); font-weight:600;">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 1000);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button" class="btn btn-outline-danger"
                @onclick="@(() => {SetServerStatus(false);})">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button" class="btn btn-outline-success"
                        @onclick="@(() => {SetServerStatus(true);})">
                    Turn On
                </button>
            }
            &nbsp;
            <a href="/server/@Server.ServerId" class="btn btn-outline-primary">Edit</a>
        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-server-{Server.ServerId}")"
                      OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>

    </tr>
}

@code {
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        Server? server = ServersRepository.GetServerById(serverId);
        if (serverId > 0 && server != null)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo($"/servers/back_from/{server?.City}", true); // This does not work if global rendermode is set to InteractiveServer
        }
    }

    private string GetCityColor()
    {
        if (SelectedCity != null)
        {
            switch (SelectedCity)
            {
                case "Toronto": return "#77ee66";
                case "Ottawa": return "#55ccff";
                case "Halifax": return "#ffdd55";
                case "Montreal": return "#ffbb55";
                case "Calgary": return "#bbaaef";
                default: return "white";
            }
        }
        else
            return "white";
    }

    private void SetServerStatus(bool status)
    {
        if (this.Server is not null)
        {
            if (this.Server.IsOnline != status)
            {
                int num = 0;
                switch (this.Server.City)
                {
                    case "Toronto":
                        num = TorontoOnlineServersStore.GetNumberServersOnline();
                        if (status)
                            TorontoOnlineServersStore.SetNumbersServersOnline(num + 1);
                        else if (num >= 1)
                            TorontoOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Montreal":
                    //     num = MontrealOnlineServersStore.GetNumberServersOnline();
                    //     if (status)
                    //         MontrealOnlineServersStore.SetNumbersServersOnline(num + 1);
                    //     else if (num >= 1)
                    //         MontrealOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Ottawa":
                    //     num = OttawaOnlineServersStore.GetNumberServersOnline();
                    //     if (status)
                    //         OttawaOnlineServersStore.SetNumbersServersOnline(num + 1);
                    //     else if (num >= 1)
                            // OttawaOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Calgary":
                    //     num = CalgaryOnlineServersStore.GetNumberServersOnline();
                    //     if (status)
                    //         CalgaryOnlineServersStore.SetNumbersServersOnline(num + 1);
                    //     else if (num >= 1)
                    //         CalgaryOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                    case "Halifax":
                    //     num = HalifaxOnlineServersStore.GetNumberServersOnline();
                    //     if (status)
                    //         HalifaxOnlineServersStore.SetNumbersServersOnline(num + 1);
                    //     else if (num >= 1)
                    //         HalifaxOnlineServersStore.SetNumbersServersOnline(num - 1);
                        break;
                }

                this.Server.IsOnline = status;

                //ServersEFCoreRepository.UpdateServer(this.Server.ServerId, Server);
                ServersRepository.UpdateServer(this.Server.ServerId, Server);
            }
        }

    }
}
