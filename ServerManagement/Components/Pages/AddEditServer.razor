@page "/server/{id:int?}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<NavigationLock 
    OnBeforeInternalNavigation="OnBeforeInternalNavigation">
</NavigationLock>

@if(Id.HasValue)
{
    <h3>Edit Server</h3>
}
else
{
    <h3>Add Server</h3>
}

@if (server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        @if (server.ServerId > 0)
        {
            <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>
        }

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="OnLine">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>

        @if (server.ServerId > 0)
        {
            <button type="submit" class="btn btn-primary">Update</button>

        }
        else
        {
            <button type="submit" class="btn btn-primary">Save</button>
        }

        &nbsp;
        <a href="/servers" class="btn btn-primary">Close</a>
    </EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    private bool isSubmitNav = false;

    // Not sure if this should be used on a non-SSR page.
    // This page is not a child of any interactive components.
    protected override void OnParametersSet()
    {
        if (this.Id.HasValue)
            server ??= ServersRepository.GetServerById(this.Id.Value);
        else
            server ??= new Server() { IsOnline = false };
    }

    private void Submit()
    {
        if (server != null)
        {
            if (this.Id.HasValue)
                ServersRepository.UpdateServer(server.ServerId, server);
            else
                ServersRepository.AddServer(server);

            isSubmitNav = true;
            NavigationManager.NavigateTo($"/servers/back_from/{server?.City}", true);

        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        if (!isSubmitNav)
        {
            var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");
            if (!isConfirmed)
            {
                context.PreventNavigation();
            }
        }

    }
}
